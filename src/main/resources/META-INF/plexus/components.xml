<?xml version='1.0' encoding='UTF-8'?>

<!--
Copyright (C) 2011-2016, Neticoa SAS France - Tous droits réservés.
Author(s) : Franck Bonin, Neticoa SAS France

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<component-set>
  <components>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleaseManager</role>
      <role-hint>default</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.DefaultCxxReleaseManager</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
          <field-name>phases</field-name>
        </requirement>
      </requirements>
      <configuration>
        <!--
        ALL PHASE STATUS !
          PreCheckPomPhase                DONE <=> maven release plugin scm-check-modifications phase + custom checks + filter project 
          ScmCheckModificationPhase       DONE <=> maven release plugin scm-check-modifications phase 
          CheckDependencySnapshotsPhase   DONE <=> maven release plugin check-dependency-snapshots phase 
          CreateBackupPomsPhase           DONE <=> maven release plugin create-backup-poms phase 
          MapReleaseVersionsPhase         DONE : fill releaseVersions MAP (map-release-versions) + new artifactId if needed  
          MapBranchVersionsPhase          DONE : fill releaseVersions MAP (map-branch-versions) + new artifactId if needed 
          MapDeveloppementVersionsPhase   DONE : fill developmentVersions MAP (map-development-versions) 
          ScmBranchPhase                  TODO <=> maven release plugin scm-branch  
          RewritePomsForBranchPhase       TODO <=> maven release plugin rewrite-poms-for-branch + change artefactId if needed 
                                                   idea : subclass maven release plugin RewritePomsForBranchPhase class
                                                        + override transformScm method : call parent then do something like
                                                        rewriteElement( "artifactId", newArtifactId, scmRoot, namespace );
          CopyPomsIntoBranchPhase         TODO <=> NEW !!! extract branch to releasedescriptior.checkoutDirectory
                                                  (= workingDirectory Mojo config, default set to ${project.build.directory}/checkout,
                                                  see checkout-project-from-scm) + COPY POM files into it
          ScmCommitReleasePhase           TODO <=> maven release plugin scm-commit-release 
          ScmCommitBranchPhase            TODO <~=> maven release plugin scm-commit-branch !! on extracted branch !!
                                                   idea : call execute() or simulate() with a list of MavenProject pointing to
                                                        branch POM files
          ScmCommitDevelopmentPhase       TODO <=> maven release plugin scm-commit-development 
          RestoreBackupPomsPhase          TODO <=> maven release plugin restore-backup-poms 
          RewritePomsForDevelopmentPhase  TODO <=> maven release plugin rewrite-poms-for-development 
          RewritePomsForReleasePhase      TODO <=> maven release plugin rewrite-poms-for-release + change artefactId if needed
                                                   idea : subclass maven release plugin RewritePomsForReleasePhase class
                                                        + override transformScm method : call parent then do something like
                                                        rewriteElement( "artifactId", newArtifactId, scmRoot, namespace );
          RewriteOtherPomPhase            TODO LATER
          CreateTagNamePhase              DONE <=> maven release plugin input-variables phase, fill ScmReleaseLabel field 
          ScmTagPhase                     TODO <=> maven release plugin scm-tag 
          generate-release-poms           TO NOT DO ? 
          remove-release-poms             TO NOT DO ? 
        -->
        <branchPhases>
          <!-- in maven-release-plugin :
          <phase>check-poms</phase>
          <phase>scm-check-modifications</phase>
          <phase>create-backup-poms</phase>
          <phase>map-branch-versions</phase>
          <phase>map-development-versions</phase>
          <phase>rewrite-poms-for-branch</phase>
          <phase>scm-commit-branch</phase>
          <phase>scm-branch</phase>
          <phase>rewrite-poms-for-development</phase>
          <phase>scm-commit-development</phase>
          <phase>end-release</phase>
          -->
          <!-- V1
          <phase>PreCheckPomPhase</phase>
          <phase>ScmCheckModificationPhase</phase>
          <phase>CreateBackupPomsPhase</phase>
          <phase>VersionPhase</phase>
          <phase>ScmCopyPhase</phase>
          <phase>SwitchToCopyPhase</phase>
          <phase>RewritePomPhase</phase>
          <phase>ScmSavPhase</phase>
          <phase>RewriteOtherPomPhase</phase>-->
          
          <!-- starting from a Tag(read-only), a trunk or a branch, we create a branch with new version and artifactId if needed -->
          <!-- V2 -->
          <phase>PreCheckPomPhase</phase>               <!-- DONE -->
          <phase>ScmCheckModificationPhase</phase>      <!-- DONE -->
          <phase>CheckDependencySnapshotsPhase</phase>  <!-- DONE -->
          <phase>CreateBackupPomsPhase</phase>          <!-- DONE -->
          <phase>MapBranchVersionsPhase</phase>         <!-- DONE -->
          <phase>MapDeveloppementVersionsPhase</phase>  <!-- DONE -->
          <phase>ScmBranchPhase</phase>                 <!-- TODO -->
          <phase>RewritePomsForBranchPhase</phase>      <!-- TODO -->
          <phase>CopyPomsIntoBranchPhase</phase>        <!-- TODO -->
          <phase>ScmCommitBranchPhase</phase>           <!-- TODO -->
          <phase>RestoreBackupPomsPhase</phase>         <!-- TODO -->
          <phase>RewritePomsForDevelopmentPhase</phase> <!-- TODO -->
          <!--<phase>RewriteOtherPomPhase</phase>-->    <!-- TODO LATER -->
          
        </branchPhases>
        <releasePhases>
          <!-- in maven-release-plugin :
          <phase>check-poms</phase>
          <phase>scm-check-modifications</phase>
          <phase>check-dependency-snapshots</phase>
          <phase>create-backup-poms</phase>
          <phase>map-release-versions</phase>
          <phase>input-variables</phase>
          <phase>map-development-versions</phase>
          <phase>rewrite-poms-for-release</phase>
          <phase>generate-release-poms</phase>
          <phase>run-preparation-goals</phase>
          <phase>scm-commit-release</phase>
          <phase>scm-tag</phase>
          <phase>rewrite-poms-for-development</phase>
          <phase>remove-release-poms</phase>
          <phase>run-completion-goals</phase>
          <phase>scm-commit-development</phase>
          <phase>end-release</phase>
          -->
          <!-- V1
          <phase>PreCheckPomPhase</phase>
          <phase>ScmCheckModificationPhase</phase>
          <phase>VersionPhase</phase>
          <phase>RewritePomPhase</phase>
          <phase>ScmSavPhase</phase>
          <phase>ScmCopyPhase</phase>
          <phase>RestorePomPhase</phase>
          <phase>RewriteOtherPomPhase</phase>-->
          
          <!-- starting from a Branch or Trunk, we create a tag with new version if needed, then we 
               change version in originate Branch or Trunk-->
          <!-- V2 -->
          <phase>PreCheckPomPhase</phase>               <!-- DONE -->
          <phase>ScmCheckModificationPhase</phase>      <!-- DONE -->
          <phase>CheckDependencySnapshotsPhase</phase>  <!-- DONE -->
          <phase>CreateBackupPomsPhase</phase>          <!-- DONE -->
          <phase>MapReleaseVersionsPhase</phase>        <!-- DONE -->
          <phase>MapDeveloppementVersionsPhase</phase>  <!-- DONE -->
          <phase>CreateTagNamePhase</phase>             <!-- DONE -->
          <phase>RewritePomsForReleasePhase</phase>     <!-- TODO -->
          <!--<phase>generate-release-poms</phase>-->   <!-- TO NOT DO ? -->
          <phase>ScmCommitReleasePhase</phase>          <!-- TODO -->
          <phase>ScmTagPhase</phase>                    <!-- TODO -->
          <phase>RewritePomsForDevelopmentPhase</phase> <!-- TODO-->
          <!--<phase>remove-release-poms</phase>-->     <!-- TO NOT DO ? -->
          <phase>ScmCommitDevelopmentPhase</phase>      <!-- TODO -->
          <!--<phase>RewriteOtherPomPhase</phase> -->   <!-- TODO LATER -->
                    
        </releasePhases>
      </configuration>
    </component>
    
    <component>
      <role>org.sonatype.plexus.components.sec.dispatcher.SecDispatcher</role>
      <role-hint>mng-4384</role-hint>
      <implementation>org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher</implementation>
      <requirements>
        <requirement>
          <role>org.sonatype.plexus.components.cipher.PlexusCipher</role>
          <role-hint>mng-4384</role-hint>
          <field-name>_cipher</field-name>
        </requirement>
      </requirements>
      <configuration>
        <_configuration-file>~/.m2/settings-security.xml</_configuration-file>
      </configuration>
    </component>
    
    <component>
      <role>org.sonatype.plexus.components.cipher.PlexusCipher</role>
      <role-hint>mng-4384</role-hint>
      <implementation>org.sonatype.plexus.components.cipher.DefaultPlexusCipher</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>PreCheckPomPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.PreCheckPomPhase</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>cxx-check-poms</role-hint>
        </requirement>
        <requirement>
          <role>org.sonatype.plexus.components.sec.dispatcher.SecDispatcher</role>
          <field-name>secDispatcher</field-name>
          <role-hint>mng-4384</role-hint>
        </requirement>        
      </requirements>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxVersionPolicy</role>
      <role-hint>default</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.DefaultCxxVersionPolicy</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmCheckModificationPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmCheckModificationPhase</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>scm-check-modifications</role-hint>
        </requirement>
      </requirements>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>CheckDependencySnapshotsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.CheckDependencySnapshotsPhase</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>check-dependency-snapshots</role-hint>
        </requirement>
      </requirements>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>CreateBackupPomsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.CreateBackupPomsPhase</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>create-backup-poms</role-hint>
        </requirement>
      </requirements>      
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>MapBranchVersionsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.MapVersionsPhase</implementation>
      <configuration>
        <mode>branch</mode>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.components.interactivity.Prompter</role>
          <role-hint>default</role-hint>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugin.cxx.utils.release.CxxVersionPolicy</role>
          <field-name>versionPolicies</field-name>
        </requirement>
      </requirements>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>MapDeveloppementVersionsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.MapVersionsPhase</implementation>
      <configuration>
        <mode>dev</mode>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.components.interactivity.Prompter</role>
          <role-hint>default</role-hint>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugin.cxx.utils.release.CxxVersionPolicy</role>
          <field-name>versionPolicies</field-name>
        </requirement>
      </requirements>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>MapReleaseVersionsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.MapVersionsPhase</implementation>
      <configuration>
        <mode>release</mode>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.components.interactivity.Prompter</role>
          <role-hint>default</role-hint>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugin.cxx.utils.release.CxxVersionPolicy</role>
          <field-name>versionPolicies</field-name>
        </requirement>
      </requirements>
    </component>
        
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmBranchPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmBranchPhase</implementation>
      <configuration>
        <forceDryRun>true</forceDryRun>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>scm-branch</role-hint>
        </requirement>
      </requirements>   
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmTagPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmTagPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>CopyPomsIntoBranchPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.CopyPomsIntoBranchPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>RewritePomsForBranchPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.RewritePomsForBranchPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>RewritePomsForDevelopmentPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.RewritePomsForDevelopmentPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>RewritePomsForReleasePhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.RewritePomsForReleasePhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmCommitBranchPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmCommitBranchPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmCommitDevelopmentPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmCommitDevelopmentPhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>ScmCommitReleasePhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.ScmCommitReleasePhase</implementation>
    </component>
    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>RestoreBackupPomsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.RestoreBackupPomsPhase</implementation>
    </component> 
<!--    
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>RewriteOtherPomPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.RewriteOtherPomPhase</implementation>
    </component> 
-->        
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>CheckDependencySnapshotsPhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.CheckDependencySnapshotsPhase</implementation>
    </component>
     
    <component>
      <role>org.apache.maven.plugin.cxx.utils.release.CxxReleasePhase</role>
      <role-hint>CreateTagNamePhase</role-hint>
      <implementation>org.apache.maven.plugin.cxx.utils.release.CreateTagNamePhase</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
          <field-name>mavenReleasePhase</field-name>
          <role-hint>input-variables</role-hint>
        </requirement>
      </requirements>      
    </component>    

    <!-- Tuned maven-release components -->
    <component>
      <role>org.apache.maven.shared.release.phase.ReleasePhase</role>
      <role-hint>cxx-check-poms</role-hint>
      <implementation>org.apache.maven.shared.release.phase.CheckPomPhase</implementation>
      <configuration>
        <scmRequired>true</scmRequired>
        <snapshotsRequired>false</snapshotsRequired>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.release.scm.ScmRepositoryConfigurator</role>
        </requirement>
      </requirements>
    </component>
    
    <!--
     |
     | ArchiveContentLister.
     |
     -->
    
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>bzip2</role-hint>
      <implementation>org.codehaus.plexus.archiver.bzip2.BZip2ArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>gzip</role-hint>
      <implementation>org.codehaus.plexus.archiver.gzip.GZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>snappy</role-hint>
      <implementation>org.codehaus.plexus.archiver.snappy.SnappyArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tar</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>zip</role-hint>
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>jar</role-hint>
      <!-- there is no implementation of JarArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>war</role-hint>
      <!-- there is no implementation of WarArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>ear</role-hint>
      <!-- there is no implementation of EarArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>swc</role-hint>
      <!-- there is no implementation of SWCArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentListerr</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>	
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>nar</role-hint>
      <!-- there is no implementation of NARArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>  
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>esb</role-hint>
      <!-- there is no implementation of ESBArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>    
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>sar</role-hint>
      <!-- there is no implementation of SARArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>car</role-hint>
      <!-- there is no implementation of CARArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>  
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>par</role-hint>
      <!-- there is no implementation of PARArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>  
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>rar</role-hint>
      <!-- there is no implementation of RarArchiveContentLister, but ZipArchiveContentLister will do the job -->
      <implementation>org.codehaus.plexus.archiver.zip.ZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tgz</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarGZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tar.gz</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarGZipArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>

    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tbz2</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarBZip2ArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>

    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tar.bz2</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarBZip2ArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>

    <component>
      <role>org.codehaus.plexus.archiver.ArchiveContentLister</role>
      <role-hint>tar.snappy</role-hint>
      <implementation>org.codehaus.plexus.archiver.tar.TarSnappyArchiveContentLister</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
    </component>

    <!--
     |
     | ArchiveContentListerManager
     |
     -->
    <component>
      <role>org.codehaus.plexus.archiver.manager.ArchiveContentListerManager</role>
      <implementation>org.codehaus.plexus.archiver.manager.DefaultArchiveContentListerManager</implementation>
      <role-hint>default</role-hint>
    </component>	  

  </components>
</component-set>
